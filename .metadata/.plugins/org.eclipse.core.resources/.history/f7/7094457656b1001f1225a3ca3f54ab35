package com.javaexpress.reviewms.review.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.javaexpress.reviewms.review.bean.Review;
import com.javaexpress.reviewms.review.service.ReviewService;

@RestController
@RequestMapping("/reviews}")
public class ReviewController {

	@Autowired
	private ReviewService reviewService;

	@GetMapping
	public ResponseEntity<List<Review>> getAllReviews(@PathVariable Long companyId) {
		return new ResponseEntity<>(reviewService.getAllReviews(companyId), HttpStatus.OK);
	}

	@PostMapping
	public ResponseEntity<String> addReview(@RequestParam Long companyId, @RequestBody Review review) {

		boolean isReviewSaved = reviewService.addReview(companyId, review);
		if (isReviewSaved) {
			return new ResponseEntity<>("Review Added Successfully.", HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>("Review Not Added. Company Not Found.", HttpStatus.NOT_FOUND);
		}
	}
	
	@GetMapping("/reviews/{reviewId}")
	public ResponseEntity<Review> getReview(@PathVariable Long companyId,  @PathVariable Long reviewId){
		Review review = reviewService.getReview(companyId, reviewId);
		if(review !=null) {
			return new  ResponseEntity<>(review,HttpStatus.OK);
		}
		return new  ResponseEntity<>(review,HttpStatus.NOT_FOUND);
	}
	
	@PutMapping("/reviews/{reviewId}")
	public ResponseEntity<String> updateReview(@PathVariable Long companyId,  @PathVariable Long reviewId, @RequestBody Review review){
		boolean isReviewUpdated = reviewService.updateReview(companyId, reviewId, review);
		if(isReviewUpdated) {
			return new  ResponseEntity<>("Review updated successfully.",HttpStatus.OK);
		}else {
			return new  ResponseEntity<>("Review not updated.",HttpStatus.NOT_FOUND);
		}
		
	}
	
	@DeleteMapping("/reviews/{reviewId}")
	public ResponseEntity<String> deleteReview(@PathVariable Long companyId,  @PathVariable Long reviewId){
		boolean isReviewDeleted = reviewService.deleteReview(companyId, reviewId);
		if(isReviewDeleted) {
			return new  ResponseEntity<>("Review deleted successfully.",HttpStatus.OK);
		}else {
			return new  ResponseEntity<>("Review not deleted.",HttpStatus.NOT_FOUND);
		}
	}
}
